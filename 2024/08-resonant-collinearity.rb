input = DATA.readlines(chomp: true).map(&:chars)

Map = Struct.new(:data) do
  include Enumerable
  def each
    data.each_with_index do |row, y|
      row.each_with_index do |column, x|
        yield(y, x, column)
      end
    end
  end

  def [](y,x)
    return nil if y >= data.size || y.negative?
    return nil if x >= data[y].size || x.negative?
    data[y][x]
  end
end

CITY      = Map.new(input)
@antennas = {}

CITY.each do |y, x, z|
  if z != '.'
    @antennas[z] ||= []
    @antennas[z] << [y,x] # many antennas per frequency
  end
end

require 'matrix'

def antinode(v1, v2)
  node = v1 + (v1 - v2)
  node if CITY[*node]
end

def resonance_path(path, recursion)
  node = antinode(*path[0..1])

  return [node].compact unless recursion
  return path           if node.nil?

  resonance_path(path.prepend(node).uniq, recursion)
end

def antinodes(antennas, recursion: false)
  antennas.each_with_object({}) do |(frequency, locations), memo|
    locations.map { Vector[*_1] }.combination(2).each do |v1, v2|
      path_1 = resonance_path([v1, v2], recursion)
      path_2 = resonance_path([v2, v1], recursion)

      memo[frequency] ||= []
      memo[frequency].concat((path_1 | path_2).map(&:to_a))
    end
  end
end

p part_1: antinodes(@antennas).values.flatten(1).uniq.size
# => 400

p part_2: antinodes(@antennas, recursion: true).values.flatten(1).uniq.size
# => 1280

__END__
.....................5...............P............
.............w.....T.........Xh.....5............u
...................kX.......T.......H.P...........
......u.....k...E..............................P..
.....................F.........................o..
...............k........F...................o.....
...............E........x...k..w......S..........a
...................E.......9..x.....P.............
...............................X..................
..............................................X.a.
............A.............w........e...u..........
..T...................9........x....B..........H..
..........Z.....................u.5...........3...
....................d..F.....5...zC..B...S........
...............TfZ..........F.........7S..e.h...o.
....................................3e.........h..
.....A...............f.........Hb....3O...........
..............f..d...............................o
......................................4...........
......g...................H..Z.........C.3.4..e...
............p.....d......................x...h....
...............f.p.....................l.......M..
..................................a............l..
........A.............j..........G................
...N...............9.......r..B.z.....C...........
............................lg......4..........7S.
................K.......Ey.......4.g...........V.7
........N......Av...............................G.
.............b...K...B...................C......V.
...........K...................r.....a............
.................................v...Mg...........
......p.....Z..........jr.....Y........J.....O..7.
.....p....N.....t..........j...O............l.....
.....................L...Ut.....O..v.....V........
.d......D...W......n....j0..................s..G..
.....y........L.........s...0nV.c.M...8...........
...........L.............................J..G.....
...D.................2............J..R............
.......m................L.2.....vU8Rc.............
....................................n..cz..s......
..y....................2.......c..................
............w....0....2....8....1.R.6.............
.............................86...r...........Y...
KN..............m.................U...............
.................t....n.0........1..J..z..........
......D........................1..................
m..................W......R......61...M..........Y
y....................W.b...m...................Y..
.....D....................U............s..........
..............W..6...........tb...................
