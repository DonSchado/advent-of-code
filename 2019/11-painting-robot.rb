require_relative 'intcode'

program = DATA.read.chomp.split(',').map(&:to_i)

# it will output a value indicating the direction the robot should turn:
# 0 means it should turn left 90 degrees, and 1 means it should turn right 90 degrees.
orientations = {
  '^' => { 0 => '<', 1 => '>' },
  '>' => { 0 => '^', 1 => 'v' },
  'v' => { 0 => '>', 1 => '<' },
  '<' => { 0 => 'v', 1 => '^' },
}
directions = ['^']
output_stack = []

final_output = Intcode.new(program).compute do |output, cpu|
  output_stack << output
  # it will output a value indicating the color to paint the panel the robot is over:
  # 0 means to paint the panel black,
  # and 1 means to paint the panel white.
  if output_stack.size == 2
    color, next_direction = output_stack.shift(2)

    directions << orientations[directions.last][next_direction]

    cpu << (color.zero? ? 0 : 1)
  end
end

# puts directions.inspect

require 'matrix'

directions.shift # w/o ^ @ 50,50
points = directions.each_with_index.each_with_object([[50,50, '^']]) do |(direction, i), memo|
  move = case direction
    when '^'
      [0,-1]
    when '>'
      [1,0]
    when 'v'
      [0,1]
    when '<'
      [-1,0]
    end

  memo << Array((Vector[*memo.last[0..1]] + Vector[*move]).to_a << direction)
end


# puts points.inspect


def clear; print "\e[H\e[2J"; end
class String
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red;    colorize(31); end
  def green;  colorize(32); end
  def yellow; colorize(33); end
  def grey;    colorize(90); end
end

visits = {}

points.each do |point|
  clear
  48.upto(57) do |y|
    40.upto(100) do |x|
      if point[0..1] == [x,y]
        visits[[x,y]] ||= 0
        visits[[x,y]] += 1
        print point.last.green
      elsif visits.key?([x,y])
        print 'â–ˆ'.grey
      else
        print '.'
      end
    end
    print "\n"
  end
  sleep(0.2)
end

puts 'colorized panels:'
puts visits.values.reduce(:+)

__END__
3,8,1005,8,319,1106,0,11,0,0,0,104,1,104,0,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,1002,8,1,28,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,102,1,8,51,2,1008,18,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,101,0,8,77,1,1006,8,10,1006,0,88,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,1002,8,1,106,1006,0,47,2,5,0,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,101,0,8,135,2,105,3,10,2,1101,6,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,1002,8,1,165,3,8,102,-1,8,10,101,1,10,10,4,10,108,0,8,10,4,10,1002,8,1,186,1,1009,11,10,1,9,3,10,2,1003,10,10,1,107,11,10,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,1,10,4,10,1002,8,1,225,1006,0,25,1,1009,14,10,1,1008,3,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,1002,8,1,257,1,1006,2,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,0,10,4,10,101,0,8,284,2,1004,7,10,1006,0,41,2,1106,17,10,1,104,3,10,101,1,9,9,1007,9,919,10,1005,10,15,99,109,641,104,0,104,1,21101,0,937108545948,1,21102,1,336,0,1105,1,440,21102,1,386577203612,1,21102,347,1,0,1105,1,440,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21102,1,21478178819,1,21102,1,394,0,1106,0,440,21102,21477985447,1,1,21101,405,0,0,1105,1,440,3,10,104,0,104,0,3,10,104,0,104,0,21101,984458351460,0,1,21101,428,0,0,1106,0,440,21101,709048034148,0,1,21102,439,1,0,1106,0,440,99,109,2,21201,-1,0,1,21101,0,40,2,21101,471,0,3,21102,461,1,0,1105,1,504,109,-2,2106,0,0,0,1,0,0,1,109,2,3,10,204,-1,1001,466,467,482,4,0,1001,466,1,466,108,4,466,10,1006,10,498,1101,0,0,466,109,-2,2105,1,0,0,109,4,2101,0,-1,503,1207,-3,0,10,1006,10,521,21101,0,0,-3,22102,1,-3,1,21201,-2,0,2,21102,1,1,3,21102,540,1,0,1106,0,545,109,-4,2105,1,0,109,5,1207,-3,1,10,1006,10,568,2207,-4,-2,10,1006,10,568,22101,0,-4,-4,1105,1,636,21201,-4,0,1,21201,-3,-1,2,21202,-2,2,3,21102,587,1,0,1106,0,545,21202,1,1,-4,21102,1,1,-1,2207,-4,-2,10,1006,10,606,21101,0,0,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,628,22101,0,-1,1,21101,628,0,0,105,1,503,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2105,1,0
