require_relative 'intcode'

require 'yaml'

inputs = YAML.load(DATA.read).transform_keys(&:to_sym)

# input = DATA.read.chomp.split(',').map(&:to_i)
# part 1
# counts = []
# 0.upto(49) do |y|
#   0.upto(49) do |x|
#     counts << Intcode.new(input.dup).compute([x,y])
#   end
# end

# puts counts.flatten.count(1)
# # 183

program = inputs[:input].split(',').map(&:to_i)

# grid = []
# 1.upto(50) do |y|
#   1.upto(1000) do |x|
#     grid << (Intcode.new(program.dup).compute([x,y]).first.zero? ? '.' : '#')
#   end
#   grid << "\n"
# end

grid = []
(1250).upto(1350) do |y|
  grid << "#{y}".center(4)
  (1000).upto(1300) do |x|
    grid << (Intcode.new(program.dup).compute([x,y]).first.zero? ? '.' : '#')
  end
  grid << "\n"
  # if grid.count('#') > 100
  #   pp [x,y]
  #   exit
  # end
  # print '.'
end

puts 'calculated the grid'
grid = grid.join.split("\n")
# puts grid

# grid = inputs[:grid].split("\n")

grid.each_with_index do |line, y|
  next unless y >= 100
  line_more_than_100 = line.count('#') > 100
  line.split('').each_with_index do |char, x|
    if char == '#' && line_more_than_100
      if grid[y - 99][line.index('#')] == '#'
        if grid[y - 99][x + 99] == '#'
          if line[line.index('#') + 99] == '#'
            pp [x,y-99]
            exit
          end
        end
      else
        next
      end
    else
      next
    end
  end
end

# for 10x10 wit example grid
# [25, 20] yay

# for 100x100 with input
# [126, 48]
# (126+1000)*10000 + 48+1200
# 11_261_248 too high?!

# (1000-126)*10000 + 1200-48
# 8_741_152 also wrong

# 8_011_120 is too low

__END__
input: "109,424,203,1,21102,1,11,0,1106,0,282,21101,18,0,0,1105,1,259,2101,0,1,221,203,1,21101,0,31,0,1105,1,282,21101,38,0,0,1105,1,259,21001,23,0,2,22101,0,1,3,21102,1,1,1,21101,57,0,0,1106,0,303,2102,1,1,222,20102,1,221,3,20102,1,221,2,21101,0,259,1,21102,80,1,0,1105,1,225,21102,1,130,2,21102,1,91,0,1106,0,303,2101,0,1,223,21002,222,1,4,21102,259,1,3,21102,1,225,2,21101,0,225,1,21102,1,118,0,1106,0,225,21002,222,1,3,21101,0,106,2,21102,1,133,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21101,148,0,0,1105,1,259,2102,1,1,223,20101,0,221,4,20102,1,222,3,21102,1,19,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,106,0,109,20207,1,223,2,20101,0,23,1,21102,-1,1,3,21101,0,214,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,1201,-4,0,249,21201,-3,0,1,21202,-2,1,2,21201,-1,0,3,21102,1,250,0,1105,1,225,22102,1,1,-4,109,-5,2106,0,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21201,-2,0,-2,109,-3,2105,1,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21102,343,1,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,21201,-4,0,1,21101,384,0,0,1106,0,303,1106,0,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21201,1,0,-4,109,-5,2106,0,0"
grid: |
  #.......................................
  .#......................................
  ..##....................................
  ...###..................................
  ....###.................................
  .....####...............................
  ......#####.............................
  ......######............................
  .......#######..........................
  ........########........................
  .........#########......................
  ..........#########.....................
  ...........##########...................
  ...........############.................
  ............############................
  .............#############..............
  ..............##############............
  ...............###############..........
  ................###############.........
  ................#################.......
  .................##################.....
  ..................##################....
  ...................###################..
  ....................####################
  .....................###################
  .....................###################
  ......................##################
  .......................#################
  ........................################
  .........................###############
  ..........................##############
  ..........................##############
  ...........................#############
  ............................############
  .............................###########
